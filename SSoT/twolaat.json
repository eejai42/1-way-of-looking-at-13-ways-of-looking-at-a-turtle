{ "twolaat": {"WayOfLookingAtATurtles":{"WayOfLookingAtATurtle":[{"WayNumber":"W01","Name":"OOTurtle","Description":"Simple OO -- a class with mutable state","Notes":"In this design, a simple OO class represents the turtle,\r\nand the client talks to the turtle directly."},{"WayNumber":"W02","Name":"FPTurtle","Description":"Simple FP - a module of functions with immutable state","Notes":"In this design, the turtle state is immutable. A module contains functions that return a new turtle state,\r\nand the client uses these turtle functions directly.\r\n\r\nThe client must keep track of the current state and pass it into the next function call."},{"WayNumber":"W03","Name":"Api_OO_Core","Description":"API (OO Approach) -- OO API calling stateful core class","Notes":"In this design, an API layer communicates with a turtle class\r\nand the client talks to the API layer.\r\n\r\nThe input to the API are strings, and so the API validates the\r\ninput and returns a Result containing any errors."},{"WayNumber":"W04","Name":"Api_FP_Core","Description":"API (OO/FP hybrid approach) -- OO API calling stateless functions","Notes":"In this design, an API layer communicates with pure turtle functions\r\nand the client talks to the API layer.\r\n\r\nThe API layer manages the state (rather than the client) by storing a mutable turtle state.\r\n\r\n*This approach has been named \\"},{"WayNumber":"W05","Name":"TurtleAgent","Description":"API (hybrid approach) -- OO API posting messages to an Agent","Notes":"In this design, an API layer communicates with a TurtleAgent\r\nand the client talks to the API layer.\r\n\r\nBecause the Agent has a message queue, all possible commands are managed with a\r\nsingle discriminated union type (`TurtleCommand`).\r\n\r\nThere are no mutables anywhere. The Agent manages the turtle state by\r\nstoring the current state as a parameter in the recursive message processing loop."},{"WayNumber":"W06","Name":"DependencyInjection_Interface1","Description":"Dependency injection (using interfaces) -- v1: OO interface","Notes":"In this design, an API layer communicates with a Turtle Interface (OO style) or a record of TurtleFunctions (FP style)\r\nrather than directly with a turtle.\r\nThe client injects a specific turtle implementation via the API's constructor."},{"WayNumber":"W06","Name":"DependencyInjection_Interface2","Description":"Dependency injection (using interfaces) - v2: records of functions","Notes":"In this design, an API layer communicates with a Turtle Interface (OO style) or a record of TurtleFunctions (FP style)\r\nrather than directly with a turtle.\r\nThe client injects a specific turtle implementation via the API's constructor."},{"WayNumber":"W07","Name":"DependencyInjection_Functions1","Description":"Dependency injection using functions (v1: pass in all functions)","Notes":"In this design, an API layer communicates via one or more functions that are passed in as parameters to the API call.\r\nThese functions are typically partially applied so that the call site is decoupled from the \\"},null,{"WayNumber":"No interface is passed to the constructor."},{"WayNumber":"W07","Name":"DependencyInjection_Functions2","Description":"Dependency injection using functions (v2: pass in a single function)","Notes":"In this design, an API layer communicates via one or more functions that are passed in as parameters to the API call.\r\nThese functions are typically partially applied so that the call site is decoupled from the \\"},null,{"WayNumber":"No interface is passed to the constructor."},{"WayNumber":"W08","Name":"StateMonad","Description":"Batch oriented -- Using a state monad (computation expression)","Notes":"In this design, the client uses the FP Turtle functions directly.\r\n\r\nAs before, the client must keep track of the current state and pass it into the next function call,\r\nbut this time the state is kept out of sight by using a State monad (called `turtle` computation expression here)\r\n\r\nAs a result, there are no mutables anywhere."},{"WayNumber":"W09","Name":"BatchCommands","Description":"Batch oriented -- Using a list of commands","Notes":"In this design, the client creates a list of `Command`s that will be intepreted later.\r\nThese commands are then run in sequence using the Turtle library functions.\r\n\r\nThis approach means that there is no state that needs to be persisted between calls by the client."},{"WayNumber":"W10","Name":"EventSourcing","Description":"Event sourcing -- Building state from a list of past events","Notes":"In this design, the client sends a `Command` to a `CommandHandler`.\r\nThe CommandHandler converts that to a list of events and stores them in an `EventStore`.\r\n\r\nIn order to know how to process a Command, the CommandHandler builds the current state\r\nfrom scratch using the past events associated with that particular turtle.\r\n\r\nNeither the client nor the command handler needs to track state.  Only the EventStore is mutable."},{"WayNumber":"W11","Name":"FRP","Description":"Functional Retroactive Programming -- Business logic is based on reacting to earlier events","Notes":"In this design, the \\"},{"WayNumber":"A client sends a Command to a CommandHandler","Name":"which converts that to a list of events and stores them in an EventStore."},null,{"WayNumber":"However in this design","Name":"the CommandHandler only updates state and does NOT do any complex business logic."},null,{"WayNumber":"The domain logic is done on the \\"},{"WayNumber":"W12","Name":"BranchingOnResponse","Description":"Monadic control flow -- Making decisions in the turtle computation expression","Notes":"In this design, the turtle can reply to certain commands with errors.\r\n\r\nThe code demonstrates how the client can make decisions inside the turtle computation expression\r\nwhile the state is being passed around behind the scenes."},{"WayNumber":"W13","Name":"InterpreterV1","Description":"The interpreter pattern","Notes":"In this design, the client builds a data structure (`TurtleProgram`) that represents the instructions.\r\n\r\nThis Turtle Program can then interpreted later in various ways"},{"WayNumber":"W13","Name":"InterpreterV2","Description":"The interpreter pattern","Notes":"In this design, the client builds a data structure (`TurtleProgram`) that represents the instructions.\r\n\r\nThis Turtle Program can then interpreted later in various ways"},{"WayNumber":"W14","Name":"AdtTurtle","Description":"Abstract Data Turtle - a private type with an associated module of functions","Notes":"In this design, the details of the turtle structure is hidden from the client,\r\nso the it could be changed without breaking any code.\r\n\r\nSee https://www.reddit.com/r/fsharp/comments/36s0zr/structuring_f_programs_with_abstract_data_types/?\r\nfor more on ADTs in F#."},{"WayNumber":"W15","Name":"CapabilityBasedTurtle","Description":"API with capabilities","Notes":"In this design, the turtle exposes a list of functions (capabilities) after each action.\r\nThese are the ONLY actions available to the client\r\n\r\nMore on capability-based security at http://fsharpforfunandprofit.com/posts/capability-based-security/"}]},"TurtleAttributes":{"TurtleAttribute":[{"Name":"Position","Type":"Position","InitialValue":"0x0"},{"Name":"Angle","Type":"Degrees","InitialValue":"0"},{"Name":"Color","Type":"Color","InitialValue":"Black"},{"Name":"PenState","Type":"PenState","InitialValue":"Down"}]},"Colors":{"Color":[{"Name":"Black","HexValue":"#000000"},{"Name":"Red","HexValue":"#FF0000"},{"Name":"Blue","HexValue":"#0000FF"},{"Name":"Green","HexValue":"#00FF00"}]},"PenStates":{"PenState":[{"Name":"Up","Description":"The pen is up (not drawing)"},{"Name":"Down","Description":"The pne is down (drawing)"},{"Name":"Moving","Description":"The pen is in motion"}]},"TurtleCommands":{"TurtleCommand":[{"Name":"Move","Description":"Move a distance","Parameter":"Distance"},{"Name":"Turn","Parameter":"Degrees"},{"Name":"PenUp"},{"Name":"PenDown"},{"Name":"SetColor","Parameter":"Color"},{"Name":"DrawPolygon","Parameter":"Sides"}]},"PredifinedScripts":{"PredifinedScript":[{"Name":"Triangle","DisplayName":"Triangle","Description":"A 3 sided shape of size 100","IsActive":"True"},{"Name":"ThreeLines","DisplayName":"Three Lines","Description":"Draw three paralell lines of length 100, 50 pixels apart","IsActive":"True"},{"Name":"Box","DisplayName":"Box","Description":"Draw a 4 sided cube","IsActive":"False"}]},"PredifinedScriptSteps":{"PredifinedScriptStep":[{"PredefinedScript":"Triangle","Command":"Move","Argument":"100","ArgumentType":"Distance"},{"PredefinedScript":"Triangle","Command":"Turn","Argument":"120","ArgumentType":"Degrees"},{"PredefinedScript":"Triangle","Command":"Move","Argument":"100","ArgumentType":"Distance"},{"PredefinedScript":"Triangle","Command":"Turn","Argument":"120","ArgumentType":"Degrees"},{"PredefinedScript":"Triangle","Command":"Move","Argument":"100","ArgumentType":"Distance"},{"PredefinedScript":"Triangle","Command":"Turn","Argument":"120","ArgumentType":"Degrees"},{"PredefinedScript":"ThreeLines","Command":"PenDown","Description":"Draw black line"},{"PredefinedScript":"ThreeLines","Command":"SetColor","Argument":"Black","ArgumentType":"Color"},{"PredefinedScript":"ThreeLines","Command":"Move","Argument":"100","ArgumentType":"Distance"},{"PredefinedScript":"ThreeLines","Command":"PenUp","Description":"Move without Drawing"},{"PredefinedScript":"ThreeLines","Command":"Turn","Argument":"90","ArgumentType":"Degrees"},{"PredefinedScript":"ThreeLines","Command":"Move","Argument":"100","ArgumentType":"Distance"},{"PredefinedScript":"ThreeLines","Command":"Turn","Argument":"90","ArgumentType":"Degrees"},{"PredefinedScript":"ThreeLines","Command":"PenDown","Description":"Draw red line"},{"PredefinedScript":"ThreeLines","Command":"SetColor","Argument":"Red","ArgumentType":"Color"},{"PredefinedScript":"ThreeLines","Command":"Move","Argument":"100","ArgumentType":"Distance"},{"PredefinedScript":"ThreeLines","Command":"PenUp","Description":"Move without Drawing"},{"PredefinedScript":"ThreeLines","Command":"Turn","Argument":"90","ArgumentType":"Degrees"},{"PredefinedScript":"ThreeLines","Command":"Move","Argument":"100","ArgumentType":"Distance"},{"PredefinedScript":"ThreeLines","Command":"Turn","Argument":"90","ArgumentType":"Degrees"},{"PredefinedScript":"ThreeLines","Command":"PenDown","Description":"Back home at (0,0) with angle 0, Draw diagonal blue line"},{"PredefinedScript":"ThreeLines","Command":"SetColor","Argument":"Blue","ArgumentType":"Color"},{"PredefinedScript":"ThreeLines","Command":"Turn","Argument":"45","ArgumentType":"Degrees"},{"PredefinedScript":"ThreeLines","Command":"Move","Argument":"100","ArgumentType":"Distance"},{"PredefinedScript":"Box","Command":"Move","Argument":"100","ArgumentType":"Distance"},{"PredefinedScript":"Box","Command":"Turn","Argument":"90","ArgumentType":"Degrees"},{"PredefinedScript":"Box","Command":"Move","Argument":"100","ArgumentType":"Distance"},{"PredefinedScript":"Box","Command":"Turn","Argument":"90","ArgumentType":"Degrees"},{"PredefinedScript":"Box","Command":"Move","Argument":"100","ArgumentType":"Distance"},{"PredefinedScript":"Box","Command":"Turn","Argument":"90","ArgumentType":"Degrees"},{"PredefinedScript":"Box","Command":"Move","Argument":"100","ArgumentType":"Distance"},{"PredefinedScript":"Box","Command":"Turn","Argument":"90","ArgumentType":"Degrees"}]}} }