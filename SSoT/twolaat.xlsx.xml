<twolaat><WayOfLookingAtATurtles>
  <WayOfLookingAtATurtle>
    <WayNumber>W01</WayNumber>
    <DisplayWayNumber>Way 01</DisplayWayNumber>
    <MainFileName>01-OOTurtle.fsx</MainFileName>
    <Name>OOTurtle</Name>
    <Description>Simple OO -- a class with mutable state</Description>
    <Notes>In this design, a simple OO class represents the turtle,
and the client talks to the turtle directly.</Notes>
  </WayOfLookingAtATurtle>
  <WayOfLookingAtATurtle>
    <WayNumber>W02</WayNumber>
    <DisplayWayNumber>Way 02</DisplayWayNumber>
    <MainFileName>02-FPTurtle.fsx</MainFileName>
    <Name>FPTurtle</Name>
    <Description>Simple FP - a module of functions with immutable state</Description>
    <Notes>In this design, the turtle state is immutable. A module contains functions that return a new turtle state,
and the client uses these turtle functions directly.

The client must keep track of the current state and pass it into the next function call.</Notes>
  </WayOfLookingAtATurtle>
  <WayOfLookingAtATurtle>
    <WayNumber>W03</WayNumber>
    <DisplayWayNumber>Way 03</DisplayWayNumber>
    <MainFileName>03-Api_OO_Core.fsx</MainFileName>
    <Name>Api_OO_Core</Name>
    <Description>API (OO Approach) -- OO API calling stateful core class</Description>
    <Notes>In this design, an API layer communicates with a turtle class
and the client talks to the API layer.

The input to the API are strings, and so the API validates the
input and returns a Result containing any errors.</Notes>
  </WayOfLookingAtATurtle>
  <WayOfLookingAtATurtle>
    <WayNumber>W04</WayNumber>
    <DisplayWayNumber>Way 04</DisplayWayNumber>
    <MainFileName>04-Api_FP_Core.fsx</MainFileName>
    <Name>Api_FP_Core</Name>
    <Description>API (OO/FP hybrid approach) -- OO API calling stateless functions</Description>
    <Notes>In this design, an API layer communicates with pure turtle functions
and the client talks to the API layer.

The API layer manages the state (rather than the client) by storing a mutable turtle state.

*This approach has been named \</Notes>
  </WayOfLookingAtATurtle>
  <WayOfLookingAtATurtle>
    <WayNumber>W05</WayNumber>
    <DisplayWayNumber>Way 05</DisplayWayNumber>
    <MainFileName>05-TurtleAgent.fsx</MainFileName>
    <Name>TurtleAgent</Name>
    <Description>API (hybrid approach) -- OO API posting messages to an Agent</Description>
    <Notes>In this design, an API layer communicates with a TurtleAgent
and the client talks to the API layer.

Because the Agent has a message queue, all possible commands are managed with a
single discriminated union type (`TurtleCommand`).

There are no mutables anywhere. The Agent manages the turtle state by
storing the current state as a parameter in the recursive message processing loop.</Notes>
  </WayOfLookingAtATurtle>
  <WayOfLookingAtATurtle>
    <WayNumber>W06</WayNumber>
    <DisplayWayNumber>Way 06</DisplayWayNumber>
    <MainFileName>06-DependencyInjection_Interface-1.fsx</MainFileName>
    <Name>DependencyInjection_Interface1</Name>
    <Description>Dependency injection (using interfaces) -- v1: OO interface</Description>
    <Notes>In this design, an API layer communicates with a Turtle Interface (OO style) or a record of TurtleFunctions (FP style)
rather than directly with a turtle.
The client injects a specific turtle implementation via the API's constructor.</Notes>
  </WayOfLookingAtATurtle>
  <WayOfLookingAtATurtle>
    <WayNumber>W06</WayNumber>
    <DisplayWayNumber>Way 06</DisplayWayNumber>
    <MainFileName>06-DependencyInjection_Interface-2.fsx</MainFileName>
    <Name>DependencyInjection_Interface2</Name>
    <Description>Dependency injection (using interfaces) - v2: records of functions</Description>
    <Notes>In this design, an API layer communicates with a Turtle Interface (OO style) or a record of TurtleFunctions (FP style)
rather than directly with a turtle.
The client injects a specific turtle implementation via the API's constructor.</Notes>
  </WayOfLookingAtATurtle>
  <WayOfLookingAtATurtle>
    <WayNumber>W07</WayNumber>
    <DisplayWayNumber>Way 07</DisplayWayNumber>
    <MainFileName>07-DependencyInjection_Functions-1.fsx</MainFileName>
    <Name>DependencyInjection_Functions1</Name>
    <Description>Dependency injection using functions (v1: pass in all functions)</Description>
    <Notes>In this design, an API layer communicates via one or more functions that are passed in as parameters to the API call.
These functions are typically partially applied so that the call site is decoupled from the \</Notes>
  </WayOfLookingAtATurtle>
  <WayOfLookingAtATurtle />
  <WayOfLookingAtATurtle>
    <WayNumber>No interface is passed to the constructor.</WayNumber>
  </WayOfLookingAtATurtle>
  <WayOfLookingAtATurtle>
    <WayNumber>W07</WayNumber>
    <DisplayWayNumber>Way 07</DisplayWayNumber>
    <MainFileName>07-DependencyInjection_Functions-2.fsx</MainFileName>
    <Name>DependencyInjection_Functions2</Name>
    <Description>Dependency injection using functions (v2: pass in a single function)</Description>
    <Notes>In this design, an API layer communicates via one or more functions that are passed in as parameters to the API call.
These functions are typically partially applied so that the call site is decoupled from the \</Notes>
  </WayOfLookingAtATurtle>
  <WayOfLookingAtATurtle />
  <WayOfLookingAtATurtle>
    <WayNumber>No interface is passed to the constructor.</WayNumber>
  </WayOfLookingAtATurtle>
  <WayOfLookingAtATurtle>
    <WayNumber>W08</WayNumber>
    <DisplayWayNumber>Way 08</DisplayWayNumber>
    <MainFileName>08-StateMonad.fsx</MainFileName>
    <Name>StateMonad</Name>
    <Description>Batch oriented -- Using a state monad (computation expression)</Description>
    <Notes>In this design, the client uses the FP Turtle functions directly.

As before, the client must keep track of the current state and pass it into the next function call,
but this time the state is kept out of sight by using a State monad (called `turtle` computation expression here)

As a result, there are no mutables anywhere.</Notes>
  </WayOfLookingAtATurtle>
  <WayOfLookingAtATurtle>
    <WayNumber>W09</WayNumber>
    <DisplayWayNumber>Way 09</DisplayWayNumber>
    <MainFileName>09-BatchCommands.fsx</MainFileName>
    <Name>BatchCommands</Name>
    <Description>Batch oriented -- Using a list of commands</Description>
    <Notes>In this design, the client creates a list of `Command`s that will be intepreted later.
These commands are then run in sequence using the Turtle library functions.

This approach means that there is no state that needs to be persisted between calls by the client.</Notes>
  </WayOfLookingAtATurtle>
  <WayOfLookingAtATurtle>
    <WayNumber>W10</WayNumber>
    <DisplayWayNumber>Way 10</DisplayWayNumber>
    <MainFileName>10-EventSourcing.fsx</MainFileName>
    <Name>EventSourcing</Name>
    <Description>Event sourcing -- Building state from a list of past events</Description>
    <Notes>In this design, the client sends a `Command` to a `CommandHandler`.
The CommandHandler converts that to a list of events and stores them in an `EventStore`.

In order to know how to process a Command, the CommandHandler builds the current state
from scratch using the past events associated with that particular turtle.

Neither the client nor the command handler needs to track state.  Only the EventStore is mutable.</Notes>
  </WayOfLookingAtATurtle>
  <WayOfLookingAtATurtle>
    <WayNumber>W11</WayNumber>
    <DisplayWayNumber>Way 11</DisplayWayNumber>
    <MainFileName>11-FRP.fsx</MainFileName>
    <Name>FRP</Name>
    <Description>Functional Retroactive Programming -- Business logic is based on reacting to earlier events</Description>
    <Notes>In this design, the \</Notes>
  </WayOfLookingAtATurtle>
  <WayOfLookingAtATurtle>
    <WayNumber>A client sends a Command to a CommandHandler</WayNumber>
    <DisplayWayNumber>which converts that to a list of events and stores them in an EventStore.</DisplayWayNumber>
  </WayOfLookingAtATurtle>
  <WayOfLookingAtATurtle />
  <WayOfLookingAtATurtle>
    <WayNumber>However in this design</WayNumber>
    <DisplayWayNumber>the CommandHandler only updates state and does NOT do any complex business logic.</DisplayWayNumber>
  </WayOfLookingAtATurtle>
  <WayOfLookingAtATurtle />
  <WayOfLookingAtATurtle>
    <WayNumber>The domain logic is done on the \</WayNumber>
  </WayOfLookingAtATurtle>
  <WayOfLookingAtATurtle>
    <WayNumber>W12</WayNumber>
    <DisplayWayNumber>Way 12</DisplayWayNumber>
    <MainFileName>12-BranchingOnResponse.fsx</MainFileName>
    <Name>BranchingOnResponse</Name>
    <Description>Monadic control flow -- Making decisions in the turtle computation expression</Description>
    <Notes>In this design, the turtle can reply to certain commands with errors.

The code demonstrates how the client can make decisions inside the turtle computation expression
while the state is being passed around behind the scenes.</Notes>
  </WayOfLookingAtATurtle>
  <WayOfLookingAtATurtle>
    <WayNumber>W13</WayNumber>
    <DisplayWayNumber>Way 13</DisplayWayNumber>
    <MainFileName>13-Interpreter-v1.fsx</MainFileName>
    <Name>InterpreterV1</Name>
    <Description>The interpreter pattern</Description>
    <Notes>In this design, the client builds a data structure (`TurtleProgram`) that represents the instructions.

This Turtle Program can then interpreted later in various ways</Notes>
  </WayOfLookingAtATurtle>
  <WayOfLookingAtATurtle>
    <WayNumber>W13</WayNumber>
    <DisplayWayNumber>Way 13</DisplayWayNumber>
    <MainFileName>13-Interpreter-v2.fsx</MainFileName>
    <Name>InterpreterV2</Name>
    <Description>The interpreter pattern</Description>
    <Notes>In this design, the client builds a data structure (`TurtleProgram`) that represents the instructions.

This Turtle Program can then interpreted later in various ways</Notes>
  </WayOfLookingAtATurtle>
  <WayOfLookingAtATurtle>
    <WayNumber>W14</WayNumber>
    <DisplayWayNumber>Way 14</DisplayWayNumber>
    <MainFileName>14-AdtTurtle.fsx</MainFileName>
    <Name>AdtTurtle</Name>
    <Description>Abstract Data Turtle - a private type with an associated module of functions</Description>
    <Notes>In this design, the details of the turtle structure is hidden from the client,
so the it could be changed without breaking any code.

See https://www.reddit.com/r/fsharp/comments/36s0zr/structuring_f_programs_with_abstract_data_types/?
for more on ADTs in F#.</Notes>
  </WayOfLookingAtATurtle>
  <WayOfLookingAtATurtle>
    <WayNumber>W15</WayNumber>
    <DisplayWayNumber>Way 15</DisplayWayNumber>
    <MainFileName>15-CapabilityBasedTurtle.fsx</MainFileName>
    <Name>CapabilityBasedTurtle</Name>
    <Description>API with capabilities</Description>
    <Notes>In this design, the turtle exposes a list of functions (capabilities) after each action.
These are the ONLY actions available to the client

More on capability-based security at http://fsharpforfunandprofit.com/posts/capability-based-security/</Notes>
  </WayOfLookingAtATurtle>
</WayOfLookingAtATurtles><TurtleAttributes>
  <TurtleAttribute>
    <Name>Position</Name>
    <Type>Position</Type>
    <InitialValue>0x0</InitialValue>
  </TurtleAttribute>
  <TurtleAttribute>
    <Name>Angle</Name>
    <Type>Degrees</Type>
    <InitialValue>0</InitialValue>
  </TurtleAttribute>
  <TurtleAttribute>
    <Name>Color</Name>
    <Type>Color</Type>
    <InitialValue>Black</InitialValue>
  </TurtleAttribute>
  <TurtleAttribute>
    <Name>PenState</Name>
    <Type>PenState</Type>
    <InitialValue>Down</InitialValue>
  </TurtleAttribute>
</TurtleAttributes><Colors>
  <Color>
    <Name>Black</Name>
    <HexValue>#000000</HexValue>
  </Color>
  <Color>
    <Name>Red</Name>
    <HexValue>#FF0000</HexValue>
  </Color>
  <Color>
    <Name>Blue</Name>
    <HexValue>#0000FF</HexValue>
  </Color>
  <Color>
    <Name>Green</Name>
    <HexValue>#00FF00</HexValue>
  </Color>
</Colors><PenStates>
  <PenState>
    <Name>Up</Name>
    <Description>The pen is up (not drawing)</Description>
  </PenState>
  <PenState>
    <Name>Down</Name>
    <Description>The pne is down (drawing)</Description>
  </PenState>
  <PenState>
    <Name>Moving</Name>
    <Description>The pen is in motion</Description>
  </PenState>
</PenStates><TurtleCommands>
  <TurtleCommand>
    <Name>Move</Name>
    <Description>Move a distance</Description>
    <Parameter>Distance</Parameter>
  </TurtleCommand>
  <TurtleCommand>
    <Name>Turn</Name>
    <Parameter>Degrees</Parameter>
  </TurtleCommand>
  <TurtleCommand>
    <Name>PenUp</Name>
  </TurtleCommand>
  <TurtleCommand>
    <Name>PenDown</Name>
  </TurtleCommand>
  <TurtleCommand>
    <Name>SetColor</Name>
    <Parameter>Color</Parameter>
  </TurtleCommand>
  <TurtleCommand>
    <Name>DrawPolygon</Name>
    <Parameter>Sides</Parameter>
  </TurtleCommand>
</TurtleCommands><PredifinedScripts>
  <PredifinedScript>
    <Name>Triangle</Name>
    <DisplayName>Triangle</DisplayName>
    <Description>A 3 sided shape of size 100</Description>
    <IsActive>True</IsActive>
  </PredifinedScript>
  <PredifinedScript>
    <Name>ThreeLines</Name>
    <DisplayName>Three Lines</DisplayName>
    <Description>Draw three paralell lines of length 100, 50 pixels apart</Description>
    <IsActive>True</IsActive>
  </PredifinedScript>
  <PredifinedScript>
    <Name>Box</Name>
    <DisplayName>Box</DisplayName>
    <Description>Draw a 4 sided cube</Description>
    <IsActive>False</IsActive>
  </PredifinedScript>
</PredifinedScripts><PredifinedScriptSteps>
  <PredifinedScriptStep>
    <PredefinedScript>Triangle</PredefinedScript>
    <Command>Move</Command>
    <Argument>100</Argument>
    <ArgumentType>Distance</ArgumentType>
  </PredifinedScriptStep>
  <PredifinedScriptStep>
    <PredefinedScript>Triangle</PredefinedScript>
    <Command>Turn</Command>
    <Argument>120</Argument>
    <ArgumentType>Degrees</ArgumentType>
  </PredifinedScriptStep>
  <PredifinedScriptStep>
    <PredefinedScript>Triangle</PredefinedScript>
    <Command>Move</Command>
    <Argument>100</Argument>
    <ArgumentType>Distance</ArgumentType>
  </PredifinedScriptStep>
  <PredifinedScriptStep>
    <PredefinedScript>Triangle</PredefinedScript>
    <Command>Turn</Command>
    <Argument>120</Argument>
    <ArgumentType>Degrees</ArgumentType>
  </PredifinedScriptStep>
  <PredifinedScriptStep>
    <PredefinedScript>Triangle</PredefinedScript>
    <Command>Move</Command>
    <Argument>100</Argument>
    <ArgumentType>Distance</ArgumentType>
  </PredifinedScriptStep>
  <PredifinedScriptStep>
    <PredefinedScript>Triangle</PredefinedScript>
    <Command>Turn</Command>
    <Argument>120</Argument>
    <ArgumentType>Degrees</ArgumentType>
  </PredifinedScriptStep>
  <PredifinedScriptStep>
    <PredefinedScript>ThreeLines</PredefinedScript>
    <Command>PenDown</Command>
    <Description>Draw black line</Description>
  </PredifinedScriptStep>
  <PredifinedScriptStep>
    <PredefinedScript>ThreeLines</PredefinedScript>
    <Command>SetColor</Command>
    <Argument>Black</Argument>
    <ArgumentType>Color</ArgumentType>
  </PredifinedScriptStep>
  <PredifinedScriptStep>
    <PredefinedScript>ThreeLines</PredefinedScript>
    <Command>Move</Command>
    <Argument>100</Argument>
    <ArgumentType>Distance</ArgumentType>
  </PredifinedScriptStep>
  <PredifinedScriptStep>
    <PredefinedScript>ThreeLines</PredefinedScript>
    <Command>PenUp</Command>
    <Description>Move without Drawing</Description>
  </PredifinedScriptStep>
  <PredifinedScriptStep>
    <PredefinedScript>ThreeLines</PredefinedScript>
    <Command>Turn</Command>
    <Argument>90</Argument>
    <ArgumentType>Degrees</ArgumentType>
  </PredifinedScriptStep>
  <PredifinedScriptStep>
    <PredefinedScript>ThreeLines</PredefinedScript>
    <Command>Move</Command>
    <Argument>100</Argument>
    <ArgumentType>Distance</ArgumentType>
  </PredifinedScriptStep>
  <PredifinedScriptStep>
    <PredefinedScript>ThreeLines</PredefinedScript>
    <Command>Turn</Command>
    <Argument>90</Argument>
    <ArgumentType>Degrees</ArgumentType>
  </PredifinedScriptStep>
  <PredifinedScriptStep>
    <PredefinedScript>ThreeLines</PredefinedScript>
    <Command>PenDown</Command>
    <Description>Draw red line</Description>
  </PredifinedScriptStep>
  <PredifinedScriptStep>
    <PredefinedScript>ThreeLines</PredefinedScript>
    <Command>SetColor</Command>
    <Argument>Red</Argument>
    <ArgumentType>Color</ArgumentType>
  </PredifinedScriptStep>
  <PredifinedScriptStep>
    <PredefinedScript>ThreeLines</PredefinedScript>
    <Command>Move</Command>
    <Argument>100</Argument>
    <ArgumentType>Distance</ArgumentType>
  </PredifinedScriptStep>
  <PredifinedScriptStep>
    <PredefinedScript>ThreeLines</PredefinedScript>
    <Command>PenUp</Command>
    <Description>Move without Drawing</Description>
  </PredifinedScriptStep>
  <PredifinedScriptStep>
    <PredefinedScript>ThreeLines</PredefinedScript>
    <Command>Turn</Command>
    <Argument>90</Argument>
    <ArgumentType>Degrees</ArgumentType>
  </PredifinedScriptStep>
  <PredifinedScriptStep>
    <PredefinedScript>ThreeLines</PredefinedScript>
    <Command>Move</Command>
    <Argument>100</Argument>
    <ArgumentType>Distance</ArgumentType>
  </PredifinedScriptStep>
  <PredifinedScriptStep>
    <PredefinedScript>ThreeLines</PredefinedScript>
    <Command>Turn</Command>
    <Argument>90</Argument>
    <ArgumentType>Degrees</ArgumentType>
  </PredifinedScriptStep>
  <PredifinedScriptStep>
    <PredefinedScript>ThreeLines</PredefinedScript>
    <Command>PenDown</Command>
    <Description>Back home at (0,0) with angle 0, Draw diagonal blue line</Description>
  </PredifinedScriptStep>
  <PredifinedScriptStep>
    <PredefinedScript>ThreeLines</PredefinedScript>
    <Command>SetColor</Command>
    <Argument>Blue</Argument>
    <ArgumentType>Color</ArgumentType>
  </PredifinedScriptStep>
  <PredifinedScriptStep>
    <PredefinedScript>ThreeLines</PredefinedScript>
    <Command>Turn</Command>
    <Argument>45</Argument>
    <ArgumentType>Degrees</ArgumentType>
  </PredifinedScriptStep>
  <PredifinedScriptStep>
    <PredefinedScript>ThreeLines</PredefinedScript>
    <Command>Move</Command>
    <Argument>100</Argument>
    <ArgumentType>Distance</ArgumentType>
  </PredifinedScriptStep>
  <PredifinedScriptStep>
    <PredefinedScript>Box</PredefinedScript>
    <Command>Move</Command>
    <Argument>100</Argument>
    <ArgumentType>Distance</ArgumentType>
  </PredifinedScriptStep>
  <PredifinedScriptStep>
    <PredefinedScript>Box</PredefinedScript>
    <Command>Turn</Command>
    <Argument>90</Argument>
    <ArgumentType>Degrees</ArgumentType>
  </PredifinedScriptStep>
  <PredifinedScriptStep>
    <PredefinedScript>Box</PredefinedScript>
    <Command>Move</Command>
    <Argument>100</Argument>
    <ArgumentType>Distance</ArgumentType>
  </PredifinedScriptStep>
  <PredifinedScriptStep>
    <PredefinedScript>Box</PredefinedScript>
    <Command>Turn</Command>
    <Argument>90</Argument>
    <ArgumentType>Degrees</ArgumentType>
  </PredifinedScriptStep>
  <PredifinedScriptStep>
    <PredefinedScript>Box</PredefinedScript>
    <Command>Move</Command>
    <Argument>100</Argument>
    <ArgumentType>Distance</ArgumentType>
  </PredifinedScriptStep>
  <PredifinedScriptStep>
    <PredefinedScript>Box</PredefinedScript>
    <Command>Turn</Command>
    <Argument>90</Argument>
    <ArgumentType>Degrees</ArgumentType>
  </PredifinedScriptStep>
  <PredifinedScriptStep>
    <PredefinedScript>Box</PredefinedScript>
    <Command>Move</Command>
    <Argument>100</Argument>
    <ArgumentType>Distance</ArgumentType>
  </PredifinedScriptStep>
  <PredifinedScriptStep>
    <PredefinedScript>Box</PredefinedScript>
    <Command>Turn</Command>
    <Argument>90</Argument>
    <ArgumentType>Degrees</ArgumentType>
  </PredifinedScriptStep>
</PredifinedScriptSteps></twolaat>